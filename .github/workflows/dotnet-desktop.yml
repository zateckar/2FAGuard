# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow will build, test, sign and package a WPF or Windows Forms desktop application
# built on .NET Core.
# To learn how to migrate your existing application to .NET Core,
# refer to https://docs.microsoft.com/en-us/dotnet/desktop-wpf/migration/convert-project-from-net-framework
#
# To configure this workflow:
#
# 1. Configure environment variables
# GitHub sets default environment variables for every workflow run.
# Replace the variables relative to your project in the "env" section below.
#
# 2. Signing
# Generate a signing certificate in the Windows Application
# Packaging Project or add an existing signing certificate to the project.
# Next, use PowerShell to encode the .pfx file using Base64 encoding
# by running the following Powershell script to generate the output string:
#
# $pfx_cert = Get-Content '.\SigningCertificate.pfx' -Encoding Byte
# [System.Convert]::ToBase64String($pfx_cert) | Out-File 'SigningCertificate_Encoded.txt'
#
# Open the output file, SigningCertificate_Encoded.txt, and copy the
# string inside. Then, add the string to the repo as a GitHub secret
# and name it "Base64_Encoded_Pfx."
# For more information on how to configure your signing certificate for
# this workflow, refer to https://github.com/microsoft/github-actions-for-desktop-apps#signing
#
# Finally, add the signing certificate password to the repo as a secret and name it "Pfx_Key".
# See "Build the Windows Application Packaging project" below to see how the secret is used.
#
# For more information on GitHub Actions, refer to https://github.com/features/actions
# For a complete CI/CD sample to get started with GitHub Action workflows for Desktop Applications,
# refer to https://github.com/microsoft/github-actions-for-desktop-apps

name: .NET Core Desktop

on:
  workflow_dispatch:

jobs:
  build-and-release:
    name: Build, Zip, and Release
    runs-on: windows-latest # WPF requires Windows

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET 8
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x' # Use .NET 8

    # Optional: If your project/solution isn't in the root, uncomment and set the path
    # - name: Set working directory
    #   run: cd src/YourAppDirectory # Example path
    #   shell: bash

    - name: Get Project Name and Path
      id: get_project
      shell: pwsh
      run: |
        $csprojPath = Get-ChildItem -Filter *.csproj -Recurse | Select-Object -First 1
        if ($null -eq $csprojPath) {
          Write-Error "Could not find .csproj file."
          exit 1
        }
        $projectName = [System.IO.Path]::GetFileNameWithoutExtension($csprojPath.FullName)
        $projectDir = Split-Path $csprojPath.FullName -Parent
        Write-Host "Project Name: $projectName"
        Write-Host "Project Path: $($csprojPath.FullName)"
        Write-Output "project_name=$projectName" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
        Write-Output "project_path=$($csprojPath.FullName)" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append

    - name: Restore dependencies
      run: dotnet restore "${{ steps.get_project.outputs.project_path }}"

    - name: Build and publish WPF application
      shell: pwsh
      run: |
        $PROJECT_PATH = "${{ steps.get_project.outputs.project_path }}"
        $OUTPUT_PATH = "./publish" # Relative path for published files
        $CONFIGURATION = "Release"
        $FRAMEWORK = "net8.0-windows" # Target framework for WPF
        $RUNTIME = "win-x64"        # Target runtime (e.g., win-x64, win-x86)
        $SELF_CONTAINED = "true"    # true: include .NET runtime; false: require runtime installed

        Write-Host "Publishing project: $PROJECT_PATH"
        dotnet publish $PROJECT_PATH --configuration $CONFIGURATION --framework $FRAMEWORK --runtime $RUNTIME --self-contained $SELF_CONTAINED -o $OUTPUT_PATH /p:PublishSingleFile=true /p:IncludeNativeLibrariesForSelfExtract=true # Creates a single .exe (optional, remove /p:PublishSingleFile... if not desired)
        # Add other build options if needed, e.g.:
        # /p:PublishReadyToRun=true  # Pre-compile for faster startup
        # /p:PublishTrimmed=false    # Set true to trim unused assemblies (test thoroughly!)

        Write-Host "Build output published to $OUTPUT_PATH"
        # Set output path for the next step
        Write-Output "artifact_output_path=$OUTPUT_PATH" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
      id: publish # Give this step an ID to reference its output

    - name: Zip the artifact
      shell: pwsh
      run: |
        $PROJECT_NAME = "${{ steps.get_project.outputs.project_name }}"
        # Use GitHub's ref_name which holds the tag name (e.g., v1.0.0)
        $ARTIFACT_NAME = "$PROJECT_NAME-${{ github.ref_name }}"
        $OUTPUT_PATH = "${{ steps.publish.outputs.artifact_output_path }}"
        $ZIP_PATH = "$ARTIFACT_NAME.zip"

        Compress-Archive -Path "$OUTPUT_PATH\*" -DestinationPath $ZIP_PATH -Force
        Write-Host "Created artifact: $ZIP_PATH"
        # Set output variable with the zip file path for the upload step
        Write-Output "artifact_zip_path=$ZIP_PATH" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
      id: zip # Give this step an ID to reference its output

    - name: Create GitHub Release and Upload Artifact
      uses: softprops/action-gh-release@v2 # Use v2 or latest stable
      with:
        # The files or patterns to upload. Use the output from the zip step.
        files: ${{ steps.zip.outputs.artifact_zip_path }}
        # Optional: Set to true to automatically generate release notes
        # based on commits since the last tag.
        # generate_release_notes: true
        # Optional: Define a release name (defaults to the tag name)
        # name: Release ${{ github.ref_name }}
        # Optional: Define body content for the release notes
        # body: |
        #   This is release ${{ github.ref_name }}
        #   Built from commit ${{ github.sha }}
      env:
        # This token is provided by Actions, Permissions must be set for it to work
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  
