name: .NET Desktop

on:
  workflow_dispatch:

jobs:
  build-and-release:
    name: Build, Zip, and Release
    runs-on: windows-latest # WPF requires Windows

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET 8
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x' # Use .NET 8
        
    - uses: ChristopheLav/windows-sdk-install@v1
      with:
        version-sdk: 26100
        features: 'OptionId.UWPCPP,OptionId.DesktopCPParm64,OptionId.SigningTools' 

    # Optional: If your project/solution isn't in the root, uncomment and set the path
    # - name: Set working directory
    #   run: cd src/YourAppDirectory # Example path
    #   shell: bash

    - name: Get Project Name and Path
      id: get_project
      shell: pwsh
      run: |
        $csprojPath = Get-ChildItem -Filter Guard.WPF.csproj -Recurse | Select-Object -First 1
        if ($null -eq $csprojPath) {
          Write-Error "Could not find .csproj file."
          exit 1
        }
        $projectName = [System.IO.Path]::GetFileNameWithoutExtension($csprojPath.FullName)
        $projectDir = Split-Path $csprojPath.FullName -Parent
        Write-Host "Project Name: $projectName"
        Write-Host "Project Path: $($csprojPath.FullName)"
        Write-Output "project_name=$projectName" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
        Write-Output "project_path=$($csprojPath.FullName)" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append

    - name: Restore dependencies
      run: dotnet restore "${{ steps.get_project.outputs.project_path }}"

    - name: Build and publish WPF application
      shell: pwsh
      run: |
        $PROJECT_PATH = "${{ steps.get_project.outputs.project_path }}"
        $OUTPUT_PATH = "./publish/dist" # Relative path for published files
        $CONFIGURATION = "Release"
        $RUNTIME = "win-x64"        # Target runtime (e.g., win-x64, win-x86)
        $SELF_CONTAINED = "true"    # true: include .NET runtime; false: require runtime installed

        Write-Host "Publishing project: $PROJECT_PATH"
        dotnet publish $PROJECT_PATH --configuration $CONFIGURATION --runtime $RUNTIME --self-contained $SELF_CONTAINED -o $OUTPUT_PATH /p:PublishSingleFile=true /p:IncludeNativeLibrariesForSelfExtract=true /p:IsPortable=true # Creates a single .exe (optional, remove /p:PublishSingleFile... if not desired)
        # Add other build options if needed, e.g.:
        # /p:PublishReadyToRun=true  # Pre-compile for faster startup
        # /p:PublishTrimmed=false    # Set true to trim unused assemblies (test thoroughly!)

        Write-Host "Build output published to $OUTPUT_PATH"
        # Set output path for the next step
        Write-Output "artifact_output_path=$OUTPUT_PATH" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
      id: publish # Give this step an ID to reference its output

    - name: Sign
      shell: pwsh
      run: |
        $SIGNTOOL_NAME = "C:\\Program Files (x86)\\Windows Kits\\10\\bin\\10.0.26100.0\\x64\\signtool.exe"
        $SIGNTOOL_NAME sign /sha1 0839626A858F4D2E44EDC99708362609E432DA5A /t "http://time.certum.pl/" /fd sha256 /d "2FAGuard" /du "https://2faguard.app" "$OUTPUT_PATH\2FAGuard.exe"

    - name: Zip the artifact
      shell: pwsh
      run: |
        $PROJECT_NAME = "${{ steps.get_project.outputs.project_name }}"
        # Use GitHub's ref_name which holds the tag name (e.g., v1.0.0)
        $ARTIFACT_NAME = "$PROJECT_NAME-${{ github.ref_name }}"
        $OUTPUT_PATH = "${{ steps.publish.outputs.artifact_output_path }}"
        $ZIP_PATH = "$ARTIFACT_NAME.zip"

        Compress-Archive -Path "$OUTPUT_PATH\*" -DestinationPath $ZIP_PATH -Force
        Write-Host "Created artifact: $ZIP_PATH"
        # Set output variable with the zip file path for the upload step
        Write-Output "artifact_zip_path=$ZIP_PATH" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
      id: zip # Give this step an ID to reference its output
      
    - name: Generate release tag
      id: tag
      run: |
        echo "::set-output name=release_tag::2FAGuard_$(date +"%Y.%m.%d_%H-%M")"

    - name: Create GitHub Release and Upload Artifact
      uses: softprops/action-gh-release@v2 # Use v2 or latest stable
      with:
        files: ${{ steps.zip.outputs.artifact_zip_path }}
        tag_name: ${{ steps.tag.outputs.release_tag }}
      env:
        # This token is provided by Actions, Permissions must be set for it to work
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  
